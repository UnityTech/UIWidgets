#!/bin/sh

repo_url="git@github.cds.internal.unity3d.com:unity/com.unity.uiwidgets.git"
package_name="com.unity.uiwidgets"
target_version="844bac835"

function usage() {
    echo "$0 [path to target repository]"
    echo
    echo "path to target repository : The repository to upload to package manager ends with "
    echo "                            com.unity.uiwidgets. If not provided, will clone from"
    echo "                            $repo_url"
    exit -1
}

if [ "$0" != "./`basename $0`" ]; then
    echo "This script must be invoked in the folder containing this script."
    exit -1
fi

if [ "$1" == "-h" ]; then
    usage
fi

if [ "$#" != "1" ]; then
    tmpdir=`mktemp -d`
    target_repository="$tmpdir/$package_name"
    echo "Repository path not provided. Will clone from"
    echo "$repo_url"
    echo "to $tmpdir/$package_name"
    git clone $repo_url $target_repository
else
    target_repository=`cd $1; pwd; cd - > /dev/null`
fi

# Check the validity of the target directory
if ! [ -d "$target_repository" ]; then
    echo "Target respository ($target_repository) does not exist!"
    exit -1
fi

current_directory=`pwd`
cd $target_repository
if [ "`git remote get-url origin`" != "$repo_url" ]; then
    cd $current_directory
    echo "Target repository is not pointing to $repo_url"
    exit -1
fi
cd $current_directory

echo "Copying to $target_repository"

# Copy the UIWidgets Repository to a temporary dir and 
# checkout to target_version
tmpdir=`mktemp -d`
curr_repo_name=$(basename `cd ..; pwd; cd - > /dev/null`) # Should be UIWidgets
cp -R ../.. $tmpdir
echo "Switching to $tmpdir/$curr_repo_name"
cd $tmpdir/$curr_repo_name
git reset --hard $target_version # Cleanup any possible local change
if [ "$?" != "0" ]; then
    echo "Failed to setup the repo of target version"
    exit -1
fi

rm -rf $target_repository/Documentation~
mkdir $target_repository/Documentation~
sed '/README-ZH.md/d ; s/CONTRIBUTING.md/CONTRIBUTING/g' README.md > $target_repository/Documentation~/com.unity.uiwidgets.md
cp $target_repository/Documentation~/{com.unity.uiwidgets.md,index.md}
cat > $target_repository/Documentation~/CONTRIBUTING.md << END
This repository exists for the sole purpose of publishing to package manager. Please contribute to https://github.com/UnityTech/UIWidgets instead.

END
cat CONTRIBUTING.md >> $target_repository/Documentation~/CONTRIBUTING.md
sed '/README-ZH.md/d ; s/CONTRIBUTING.md/CONTRIBUTING/g' README-ZH.md > $target_repository/Documentation~/index-zh.md
cat > $target_repository/Documentation~/TableOfContents.md << END
* [UIWidgets Documentation](index)
* [UIWidgets中文文档](index-zh)
END
echo "Copied Documentation"

rm -rf $target_repository/Runtime
cp -R Runtime $target_repository/
echo "Copied Runtime"

rm -rf $target_repository/Runtime/Plugins
rm -rf $target_repository/Runtime/Plugins.meta
rm -rf $target_repository/Runtime/Resources/images
rm -rf $target_repository/Runtime/Resources/images.meta
rm -rf $target_repository/Runtime/Resources/fonts
rm -rf $target_repository/Runtime/Resources/fonts.meta
echo "Removed Resources and Plugins"

rm -rf $target_repository/Editor
cp -R Editor $target_repository/
echo "Copied Editor"

echo "Cloning Samples"
rm -rf $target_repository/Samples
git clone https://github.com/UIWidgets/UIWidgetsSamples.git $target_repository/Samples
rm -rf $target_repository/Samples/.git
echo "Cloned Samples"

cp README.md* $target_repository
echo "Copied README"

cd $target_repository
git add .
git commit -m "Update to $curr_repo_name:$target_version"

echo "Please complete the following steps mannually"
echo
echo "cd $target_repository"
echo "Update CHANGELOG.md, adding entry for the new version."
echo "Update package.json, changing the version number."
echo "Update the resource package in 'Package Resources' folder, if needed."
echo "git commit"
echo "git push"
echo "Visit https://yamato.cds.internal.unity3d.com/jobs/242-com.unity.uiwidgets and wait for the jobs to succeed."
echo "Update the tags:"
echo "git tag rc-x.x.x-preview.x && git push -u origin rc-x.x.x-preview.x"
echo "Waiting for the jobs to succeed"
echo "git tag vx.x.x-preview.x && git push -u origin vx.x.x-preview.x"
echo "Waiting for the jobs to succeed"
